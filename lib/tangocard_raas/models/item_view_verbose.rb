=begin
#Tango Card RaaS API

#<p>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us at <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>.

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.2-SNAPSHOT

=end

require 'date'

module TangocardRaas
  class ItemViewVerbose
    # Countries
    attr_accessor :countries

    # Created Date
    attr_accessor :created_date

    # Credential Types
    attr_accessor :credential_types

    # Currency Code
    attr_accessor :currency_code

    # Exchange Rate Rule
    attr_accessor :exchange_rate_rule

    # Face Value
    attr_accessor :face_value

    # Whole Value Required
    attr_accessor :is_whole_amount_value_required

    # Last Updated Date
    attr_accessor :last_update_date

    # Max Value
    attr_accessor :max_value

    # Min Value
    attr_accessor :min_value

    # Redemption Instructions
    attr_accessor :redemption_instructions

    # Reward Name
    attr_accessor :reward_name

    # Reward Type
    attr_accessor :reward_type

    # Status
    attr_accessor :status

    # Utid - Unique Tango Card ID.
    attr_accessor :utid

    # Value Type
    attr_accessor :value_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'countries' => :'countries',
        :'created_date' => :'createdDate',
        :'credential_types' => :'credentialTypes',
        :'currency_code' => :'currencyCode',
        :'exchange_rate_rule' => :'exchangeRateRule',
        :'face_value' => :'faceValue',
        :'is_whole_amount_value_required' => :'isWholeAmountValueRequired',
        :'last_update_date' => :'lastUpdateDate',
        :'max_value' => :'maxValue',
        :'min_value' => :'minValue',
        :'redemption_instructions' => :'redemptionInstructions',
        :'reward_name' => :'rewardName',
        :'reward_type' => :'rewardType',
        :'status' => :'status',
        :'utid' => :'utid',
        :'value_type' => :'valueType'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'countries' => :'Array<String>',
        :'created_date' => :'String',
        :'credential_types' => :'Array<String>',
        :'currency_code' => :'String',
        :'exchange_rate_rule' => :'String',
        :'face_value' => :'Float',
        :'is_whole_amount_value_required' => :'Boolean',
        :'last_update_date' => :'String',
        :'max_value' => :'Float',
        :'min_value' => :'Float',
        :'redemption_instructions' => :'String',
        :'reward_name' => :'String',
        :'reward_type' => :'String',
        :'status' => :'String',
        :'utid' => :'String',
        :'value_type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TangocardRaas::ItemViewVerbose` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TangocardRaas::ItemViewVerbose`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'countries')
        if (value = attributes[:'countries']).is_a?(Array)
          self.countries = value
        end
      end

      if attributes.key?(:'created_date')
        self.created_date = attributes[:'created_date']
      end

      if attributes.key?(:'credential_types')
        if (value = attributes[:'credential_types']).is_a?(Array)
          self.credential_types = value
        end
      end

      if attributes.key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.key?(:'exchange_rate_rule')
        self.exchange_rate_rule = attributes[:'exchange_rate_rule']
      end

      if attributes.key?(:'face_value')
        self.face_value = attributes[:'face_value']
      end

      if attributes.key?(:'is_whole_amount_value_required')
        self.is_whole_amount_value_required = attributes[:'is_whole_amount_value_required']
      end

      if attributes.key?(:'last_update_date')
        self.last_update_date = attributes[:'last_update_date']
      end

      if attributes.key?(:'max_value')
        self.max_value = attributes[:'max_value']
      end

      if attributes.key?(:'min_value')
        self.min_value = attributes[:'min_value']
      end

      if attributes.key?(:'redemption_instructions')
        self.redemption_instructions = attributes[:'redemption_instructions']
      end

      if attributes.key?(:'reward_name')
        self.reward_name = attributes[:'reward_name']
      end

      if attributes.key?(:'reward_type')
        self.reward_type = attributes[:'reward_type']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'utid')
        self.utid = attributes[:'utid']
      end

      if attributes.key?(:'value_type')
        self.value_type = attributes[:'value_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @countries.nil?
        invalid_properties.push('invalid value for "countries", countries cannot be nil.')
      end

      if @created_date.nil?
        invalid_properties.push('invalid value for "created_date", created_date cannot be nil.')
      end

      if @credential_types.nil?
        invalid_properties.push('invalid value for "credential_types", credential_types cannot be nil.')
      end

      if @currency_code.nil?
        invalid_properties.push('invalid value for "currency_code", currency_code cannot be nil.')
      end

      if @exchange_rate_rule.nil?
        invalid_properties.push('invalid value for "exchange_rate_rule", exchange_rate_rule cannot be nil.')
      end

      if @face_value.nil?
        invalid_properties.push('invalid value for "face_value", face_value cannot be nil.')
      end

      if @is_whole_amount_value_required.nil?
        invalid_properties.push('invalid value for "is_whole_amount_value_required", is_whole_amount_value_required cannot be nil.')
      end

      if @last_update_date.nil?
        invalid_properties.push('invalid value for "last_update_date", last_update_date cannot be nil.')
      end

      if @max_value.nil?
        invalid_properties.push('invalid value for "max_value", max_value cannot be nil.')
      end

      if @min_value.nil?
        invalid_properties.push('invalid value for "min_value", min_value cannot be nil.')
      end

      if @redemption_instructions.nil?
        invalid_properties.push('invalid value for "redemption_instructions", redemption_instructions cannot be nil.')
      end

      if @reward_name.nil?
        invalid_properties.push('invalid value for "reward_name", reward_name cannot be nil.')
      end

      if @reward_type.nil?
        invalid_properties.push('invalid value for "reward_type", reward_type cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @utid.nil?
        invalid_properties.push('invalid value for "utid", utid cannot be nil.')
      end

      if @value_type.nil?
        invalid_properties.push('invalid value for "value_type", value_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @countries.nil?
      return false if @created_date.nil?
      return false if @credential_types.nil?
      return false if @currency_code.nil?
      return false if @exchange_rate_rule.nil?
      return false if @face_value.nil?
      return false if @is_whole_amount_value_required.nil?
      return false if @last_update_date.nil?
      return false if @max_value.nil?
      return false if @min_value.nil?
      return false if @redemption_instructions.nil?
      return false if @reward_name.nil?
      return false if @reward_type.nil?
      return false if @status.nil?
      return false if @utid.nil?
      return false if @value_type.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          countries == o.countries &&
          created_date == o.created_date &&
          credential_types == o.credential_types &&
          currency_code == o.currency_code &&
          exchange_rate_rule == o.exchange_rate_rule &&
          face_value == o.face_value &&
          is_whole_amount_value_required == o.is_whole_amount_value_required &&
          last_update_date == o.last_update_date &&
          max_value == o.max_value &&
          min_value == o.min_value &&
          redemption_instructions == o.redemption_instructions &&
          reward_name == o.reward_name &&
          reward_type == o.reward_type &&
          status == o.status &&
          utid == o.utid &&
          value_type == o.value_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [countries, created_date, credential_types, currency_code, exchange_rate_rule, face_value, is_whole_amount_value_required, last_update_date, max_value, min_value, redemption_instructions, reward_name, reward_type, status, utid, value_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TangocardRaas.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
