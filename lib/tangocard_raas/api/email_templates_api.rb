=begin
#Tango Card RaaS API

#<p>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us at <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>.

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.2-SNAPSHOT

=end

require 'cgi'

module TangocardRaas
  class EmailTemplatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new email template
    # @param [Hash] opts the optional parameters
    # @option opts [CreateEmailTemplateCriteria] :create_email_template_criteria &lt;strong&gt;name&lt;/strong&gt; - A unique name to give the template.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;fromName&lt;/strong&gt; - The name that will appear in the From line of the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;subject&lt;/strong&gt; - The Subject of the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;headerImage&lt;/strong&gt; - A Base64 encoded string of an image that will show as the header of the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;headerImageAltText&lt;/strong&gt; - The Alt Text for the Header Image in the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;accentColor&lt;/strong&gt; - A Hex color value, six hexadecimal digits preceded by a pound sign, used as an accent in the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;messageBody&lt;/strong&gt; - The message body for the email. This is often used to let the recipient know why they have received the reward.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;closing&lt;/strong&gt; - After the reward credential, a space to close the message to the recipient&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;customerServiceMessage&lt;/strong&gt; - (Optional) If left null, Tango Card&#39;s Customer Support contact information will be included. Otherwise contact information for your customer support, if you are taking responsibility for providing first tier customer support of your recipients. &lt;br/&gt;&lt;br/&gt;&lt;strong&gt;accessControl&lt;/strong&gt; - (Optional) Which Customers and/or Accounts should have access to this template.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;accessControl - type&lt;/strong&gt; - The type of access being specified: PLATFORM, CUSTOMER or ACCOUNT.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;accessControl - identifier&lt;/strong&gt; - If the type is PLATFORM, the platform name or can be left blank. If the type is CUSTOMER OR ACCOUNT, the customerIdentifier or the accountIdentifier, respectively.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;defaults&lt;/strong&gt; - If you want this template to be used at order time for the given Platform, Customer or Account when the Email Template Identifier (etid) is not provided with the order.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;defaults - type&lt;/strong&gt; - The type of default being specified: PLATFORM, CUSTOMER or ACCOUNT.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;defaults - identifier&lt;/strong&gt; - If the type is PLATFORM, the platform name or can be left blank. If the type is CUSTOMER OR ACCOUNT, the customerIdentifier or the accountIdentifier, respectively.&lt;br/&gt;&lt;br/&gt;
    # @return [EmailTemplateViewVerbose]
    def create_email_template(opts = {})
      data, _status_code, _headers = create_email_template_with_http_info(opts)
      data
    end

    # Create a new email template
    # @param [Hash] opts the optional parameters
    # @option opts [CreateEmailTemplateCriteria] :create_email_template_criteria &lt;strong&gt;name&lt;/strong&gt; - A unique name to give the template.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;fromName&lt;/strong&gt; - The name that will appear in the From line of the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;subject&lt;/strong&gt; - The Subject of the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;headerImage&lt;/strong&gt; - A Base64 encoded string of an image that will show as the header of the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;headerImageAltText&lt;/strong&gt; - The Alt Text for the Header Image in the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;accentColor&lt;/strong&gt; - A Hex color value, six hexadecimal digits preceded by a pound sign, used as an accent in the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;messageBody&lt;/strong&gt; - The message body for the email. This is often used to let the recipient know why they have received the reward.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;closing&lt;/strong&gt; - After the reward credential, a space to close the message to the recipient&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;customerServiceMessage&lt;/strong&gt; - (Optional) If left null, Tango Card&#39;s Customer Support contact information will be included. Otherwise contact information for your customer support, if you are taking responsibility for providing first tier customer support of your recipients. &lt;br/&gt;&lt;br/&gt;&lt;strong&gt;accessControl&lt;/strong&gt; - (Optional) Which Customers and/or Accounts should have access to this template.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;accessControl - type&lt;/strong&gt; - The type of access being specified: PLATFORM, CUSTOMER or ACCOUNT.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;accessControl - identifier&lt;/strong&gt; - If the type is PLATFORM, the platform name or can be left blank. If the type is CUSTOMER OR ACCOUNT, the customerIdentifier or the accountIdentifier, respectively.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;defaults&lt;/strong&gt; - If you want this template to be used at order time for the given Platform, Customer or Account when the Email Template Identifier (etid) is not provided with the order.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;defaults - type&lt;/strong&gt; - The type of default being specified: PLATFORM, CUSTOMER or ACCOUNT.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;defaults - identifier&lt;/strong&gt; - If the type is PLATFORM, the platform name or can be left blank. If the type is CUSTOMER OR ACCOUNT, the customerIdentifier or the accountIdentifier, respectively.&lt;br/&gt;&lt;br/&gt;
    # @return [Array<(EmailTemplateViewVerbose, Integer, Hash)>] EmailTemplateViewVerbose data, response status code and response headers
    def create_email_template_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailTemplatesApi.create_email_template ...'
      end
      # resource path
      local_var_path = '/emailTemplates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'create_email_template_criteria']) 

      # return_type
      return_type = opts[:return_type] || 'EmailTemplateViewVerbose' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailTemplatesApi#create_email_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific Email Template on this Platform.
    # @param etid [String] Email Template Identifier (ETID) is returned in the email template response payload
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_email_template(etid, opts = {})
      delete_email_template_with_http_info(etid, opts)
      nil
    end

    # Delete a specific Email Template on this Platform.
    # @param etid [String] Email Template Identifier (ETID) is returned in the email template response payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_email_template_with_http_info(etid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailTemplatesApi.delete_email_template ...'
      end
      # verify the required parameter 'etid' is set
      if @api_client.config.client_side_validation && etid.nil?
        fail ArgumentError, "Missing the required parameter 'etid' when calling EmailTemplatesApi.delete_email_template"
      end
      # resource path
      local_var_path = '/emailTemplates/{etid}'.sub('{' + 'etid' + '}', CGI.escape(etid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailTemplatesApi#delete_email_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details for a specific Email Template on this Platform.
    # @param etid [String] Email Template Identifier (ETID) is returned in the email template response payload
    # @param [Hash] opts the optional parameters
    # @return [EmailTemplateViewVerbose]
    def get_email_template(etid, opts = {})
      data, _status_code, _headers = get_email_template_with_http_info(etid, opts)
      data
    end

    # Get details for a specific Email Template on this Platform.
    # @param etid [String] Email Template Identifier (ETID) is returned in the email template response payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailTemplateViewVerbose, Integer, Hash)>] EmailTemplateViewVerbose data, response status code and response headers
    def get_email_template_with_http_info(etid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailTemplatesApi.get_email_template ...'
      end
      # verify the required parameter 'etid' is set
      if @api_client.config.client_side_validation && etid.nil?
        fail ArgumentError, "Missing the required parameter 'etid' when calling EmailTemplatesApi.get_email_template"
      end
      # resource path
      local_var_path = '/emailTemplates/{etid}'.sub('{' + 'etid' + '}', CGI.escape(etid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EmailTemplateViewVerbose' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailTemplatesApi#get_email_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all Email Templates on this Platform.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :elements_per_block specify the number of elements in a block.
    # @option opts [Integer] :page specify the page number to return.
    # @return [EmailTemplateViewVerbose]
    def list_email_templates(opts = {})
      data, _status_code, _headers = list_email_templates_with_http_info(opts)
      data
    end

    # Get a list of all Email Templates on this Platform.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :elements_per_block specify the number of elements in a block.
    # @option opts [Integer] :page specify the page number to return.
    # @return [Array<(EmailTemplateViewVerbose, Integer, Hash)>] EmailTemplateViewVerbose data, response status code and response headers
    def list_email_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailTemplatesApi.list_email_templates ...'
      end
      # resource path
      local_var_path = '/emailTemplates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'elementsPerBlock'] = opts[:'elements_per_block'] if !opts[:'elements_per_block'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EmailTemplateViewVerbose' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailTemplatesApi#list_email_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update details for a specific Email Template on this Platform.
    # @param etid [String] Email Template Identifier (ETID) is returned in the email template response payload
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateEmailTemplateCriteria] :update_email_template_criteria &lt;strong&gt;name&lt;/strong&gt; - (Optional) A unique name to give the template.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;fromName&lt;/strong&gt; - (Optional) The name that will appear in the From line of the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;subject&lt;/strong&gt; - (Optional) The Subject of the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;headerImage&lt;/strong&gt; - (Optional) A Base64 encoded string of an image that will show as the header of the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;headerImageAltText&lt;/strong&gt; - (Optional) The Alt Text for the Header Image in the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;accentColor&lt;/strong&gt; - (Optional) A Hex color value, six hexadecimal digits preceded by a pound sign, used as an accent in the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;messageBody&lt;/strong&gt; - (Optional) The message body for the email. This is often used to let the recipient know why they have received the reward.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;closing&lt;/strong&gt; - (Optional) After the reward credential, a space to close the message to the recipient&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;customerServiceMessage&lt;/strong&gt; - (Optional) If left null, Tango Card&#39;s Customer Support contact information will be included. Otherwise contact information for your customer support, if you are taking responsibility for providing first tier customer support of your recipients. &lt;br/&gt;&lt;br/&gt;&lt;strong&gt;accessControl&lt;/strong&gt; - (Optional) Which Customers and/or Accounts should have access to this template.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;accessControl - type&lt;/strong&gt; - The type of access being specified: PLATFORM, CUSTOMER or ACCOUNT.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;accessControl - identifier&lt;/strong&gt; - If the type is PLATFORM, the platform name or can be left blank. If the type is CUSTOMER OR ACCOUNT, the customerIdentifier or the accountIdentifier, respectively.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;defaults&lt;/strong&gt; - If you want this template to be used at order time for the given Platform, Customer or Account when the Email Template Identifier (etid) is not provided with the order.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;defaults - type&lt;/strong&gt; - The type of default being specified: PLATFORM, CUSTOMER or ACCOUNT.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;defaults - identifier&lt;/strong&gt; - If the type is PLATFORM, the platform name or can be left blank. If the type is CUSTOMER OR ACCOUNT, the customerIdentifier or the accountIdentifier, respectively.&lt;br/&gt;&lt;br/&gt;
    # @return [EmailTemplateViewVerbose]
    def update_email_template(etid, opts = {})
      data, _status_code, _headers = update_email_template_with_http_info(etid, opts)
      data
    end

    # Update details for a specific Email Template on this Platform.
    # @param etid [String] Email Template Identifier (ETID) is returned in the email template response payload
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateEmailTemplateCriteria] :update_email_template_criteria &lt;strong&gt;name&lt;/strong&gt; - (Optional) A unique name to give the template.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;fromName&lt;/strong&gt; - (Optional) The name that will appear in the From line of the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;subject&lt;/strong&gt; - (Optional) The Subject of the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;headerImage&lt;/strong&gt; - (Optional) A Base64 encoded string of an image that will show as the header of the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;headerImageAltText&lt;/strong&gt; - (Optional) The Alt Text for the Header Image in the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;accentColor&lt;/strong&gt; - (Optional) A Hex color value, six hexadecimal digits preceded by a pound sign, used as an accent in the email.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;messageBody&lt;/strong&gt; - (Optional) The message body for the email. This is often used to let the recipient know why they have received the reward.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;closing&lt;/strong&gt; - (Optional) After the reward credential, a space to close the message to the recipient&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;customerServiceMessage&lt;/strong&gt; - (Optional) If left null, Tango Card&#39;s Customer Support contact information will be included. Otherwise contact information for your customer support, if you are taking responsibility for providing first tier customer support of your recipients. &lt;br/&gt;&lt;br/&gt;&lt;strong&gt;accessControl&lt;/strong&gt; - (Optional) Which Customers and/or Accounts should have access to this template.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;accessControl - type&lt;/strong&gt; - The type of access being specified: PLATFORM, CUSTOMER or ACCOUNT.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;accessControl - identifier&lt;/strong&gt; - If the type is PLATFORM, the platform name or can be left blank. If the type is CUSTOMER OR ACCOUNT, the customerIdentifier or the accountIdentifier, respectively.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;defaults&lt;/strong&gt; - If you want this template to be used at order time for the given Platform, Customer or Account when the Email Template Identifier (etid) is not provided with the order.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;defaults - type&lt;/strong&gt; - The type of default being specified: PLATFORM, CUSTOMER or ACCOUNT.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;defaults - identifier&lt;/strong&gt; - If the type is PLATFORM, the platform name or can be left blank. If the type is CUSTOMER OR ACCOUNT, the customerIdentifier or the accountIdentifier, respectively.&lt;br/&gt;&lt;br/&gt;
    # @return [Array<(EmailTemplateViewVerbose, Integer, Hash)>] EmailTemplateViewVerbose data, response status code and response headers
    def update_email_template_with_http_info(etid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailTemplatesApi.update_email_template ...'
      end
      # verify the required parameter 'etid' is set
      if @api_client.config.client_side_validation && etid.nil?
        fail ArgumentError, "Missing the required parameter 'etid' when calling EmailTemplatesApi.update_email_template"
      end
      # resource path
      local_var_path = '/emailTemplates/{etid}'.sub('{' + 'etid' + '}', CGI.escape(etid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'update_email_template_criteria']) 

      # return_type
      return_type = opts[:return_type] || 'EmailTemplateViewVerbose' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailTemplatesApi#update_email_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
